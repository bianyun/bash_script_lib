#!/usr/bin/env bash

set -e
shopt -s extdebug

#=================================================================================
# global variables and map definition
#=================================================================================
declare -A BSL_COLOR_CODE_MAP=(
  ["red"]="31m"
  ["green"]="32m"
  ["yellow"]="33m"
  ["blue"]="34m"
  ["purple"]="35m"
  ["cyan"]="36m"
)

get_legal_color_values() {
  echo "${!BSL_COLOR_CODE_MAP[@]}"
}

get_color_by_log_level() {
  [ ! -z "$1" ] && echo "${BSL_LOG_LEVEL_MAP[$1]}"
}

declare -A BSL_LOG_LEVEL_MAP=(
  ["error"]="red"
  ["success"]="green"
  ["warn"]="yellow"
  ["notice"]="blue"
  ["debug"]="purple"
  ["info"]="auto"
)

get_legal_log_level_values() {
  echo "${!BSL_LOG_LEVEL_MAP[@]}"
}

get_legal_values_by_key() {
  [ ! -z "$1" ] && echo "$(eval get_legal_$1_values)"
}


#=================================================================================
# public base functions
#=================================================================================
exitscript() {
  local pid=$$
  local pid_query_count=$(ps -f | awk '{$1=$1;print}' | cut -d' ' -f 2 | grep ${pid} | wc -l)

  if [ $pid_query_count -eq 1 ]; then
    kill -SIGINT $$ && exit 1
  fi
}


println_script_total_time_desc_and_exit() {
  local start_time=$BSL_SCRIPT_START_TIME
  local start_seconds=$BSL_SCRIPT_START_SECONDS
  
  local end_time="$(get_local_timestamp)"
  local end_seconds=$(date +%s)
  
  local total_seconds=$((end_seconds - start_seconds))
  local total_time=$(convert_seconds_human_readable_foramt $total_seconds)
  
  println "$(colorize cyan "[   TIME]") This script starts at $(colorize cyan [$start_time]), ends at $(colorize cyan [$end_time]). \
                \n\t  Total time consumption: $(colorize cyan "$total_time.")"
  exitscript
}

is_deployed_as_cluster() {
  [ "${DEPLOYED_AS_CLUSTER,,}" = "true" ] && echo true || echo false
}

get_cluster_node_id() {
  $(is_deployed_as_cluster) && [ -z "$cluster_node_id" ] && fail "cluster_node_id not set."
  echo "$cluster_node_id"
}

read_all_files_in_dir() {
  # Don't refatoring following three lines code to single line style
  if [ ! $# -eq 1 ]; then
    _print_yellow "Usage: ${FUNCNAME[0]} <dir_path>"
    exitscript
  fi

  local dir_path="${1%/}"
  for name in $(ls $dir_path); do
    local sub_path="$dir_path/$name"
    if [ -d $sub_path ]; then
      read_all_files_in_dir $sub_path
    elif [ -f $sub_path ]; then
      echo $sub_path
    fi
  done
}

get_install_files_dir() {
  if [ -z "$BSL_INSTALL_FILES_DIR" ]; then
    BSL_INSTALL_FILES_DIR="$(realpath ${SCRIPT_DIR}/../install_files)"
  fi
  echo "$BSL_INSTALL_FILES_DIR"
}

get_script_lib_modules_dir() {
  if [ -z "$BSL_SCRIPT_LIB_MODULES_DIR" ]; then
    BSL_SCRIPT_LIB_MODULES_DIR="${BSL_SCRIPT_LIB_DIR}/modules"
  fi
  echo "$BSL_SCRIPT_LIB_MODULES_DIR"
}

get_bsl_version() {
  echo "$BSL_SCRIPT_LIB_VERSION"
}

is_debug_on() {
  local words_means_ok="yes y true ok on 1"
  $(is_array_contains_item "$words_means_ok" "${BSL_DEBUG,,}") && echo true || echo false
}

is_debug_off() {
  $(is_debug_on) && echo false || echo true
}

is_trace_on() {
  [ "${BSL_TRACE,,}" = "true" ] && echo true || echo false
}

is_trace_off() {
  $(is_trace_on) && echo false || echo true
}


#=================================================================================
# private base functions
#=================================================================================
_log_error() {
  >& 2 echo -e "\033[1;31m[  ERROR] $*\033[m"
}

_println_yellow() {
  >& 2 echo -e "\033[1;33m$*\033[m"
}

_check_if_dir_exists() {
  [ $# -ne 1 ] && _log_error "Usage: ${FUNCNAME[0]} <dir_path>" && exitscript
  local dir_path=$1
  
  # Don't refatoring following three lines code to single line style
  if [ ! -d "$dir_path" ]; then
    _log_error "Required dir not exists: [$dir_path]."
    exitscript
  fi
}

_get_linux_os_id() {
  echo "$(cat /etc/os-release | grep "^ID=" | cut -d'"' -f 2 | cut -d'=' -f 2)"
}

_init_debug_status() {
  [ -z "$BSL_TRACE" ] && BSL_TRACE="false"
  [ -z "$BSL_DEBUG" ] && BSL_DEBUG="${DEBUG_ENABLED:-false}"
  [ "${BSL_TRACE,,}" = "true" ] && BSL_DEBUG="true"

  BSL_REQUIRED_COMMANDS="$BSL_REQUIRED_COMMANDS $required_commands"
  BSL_REQUIRED_COMMANDS="$(make_array_uniq_and_sorted $BSL_REQUIRED_COMMANDS)"
  
  if $(is_debug_on); then
    log_debug "========================="
    log_debug "Resolved Script Variables"
    log_debug "========================="
    log_debug "BSL_DEBUG = [$(is_debug_on)]"
    log_debug "BSL_SCRIPT_LIB_VERSION = [$BSL_SCRIPT_LIB_VERSION]"
    log_debug "BSL_REQUIRED_COMMANDS = [$BSL_REQUIRED_COMMANDS]"
    log_debug "BSL_INSTALL_FILES_DIR = [$(get_install_files_dir)]"
    
    if $(is_array_contains_item "$BSL_REQUIRED_COMMANDS" docker); then
      log_debug "BSL_CONTAINER_VOLUMES_LOCAL_DIR = [$(get_container_volumes_local_dir)]"
    fi
    println
  fi
}

_check_if_required_commands_valid() {
  check_if_commands_valid "$BSL_REQUIRED_COMMANDS"
}

_check_if_bash_version_ok() {
  local required_min_bash_version="4.0"
  local bash_version=$(echo $BASH_VERSION)
  if ! $(is_greater_than_or_equals_to $bash_version "$required_min_bash_version"); then
    fail "Current bash version [$bash_version] does not satisfy the requirement. \\n\t  The required minimum bash version: [$required_min_bash_version]."
  fi
}

_check_if_os_version_ok() {
  [ -z "$required_min_os_version" ] && return 0
  
  local current_full_os_verion=$(get_linux_os_version)
  local current_os_id=$(echo $current_full_os_verion | cut -d '_' -f 1)
  local current_os_version_num=$(echo $current_full_os_verion | cut -d '_' -f 2)
  local old_ifs=$IFS
  
  IFS=","
  for required_os_ver in ${required_min_os_version[@]}; do
    required_os_ver="$(trim $required_os_ver)"
    local required_os_id=$(echo $required_os_ver | cut -d '_' -f 1)
    local required_os_min_version_num=$(echo $required_os_ver | cut -d '_' -f 2)

    if [ "$current_os_id" != "$required_os_id" ]; then
      continue
    fi
    
    if $(is_greater_than_or_equals_to $current_os_version_num "${required_os_min_version_num,,}"); then
      IFS=$old_ifs
      return 0
    fi
  done
  
  IFS=$old_ifs
  fail "Current OS version [$current_full_os_verion] does not satisfy the requirement. \\n\t  The required OS and minimum version list: [$required_min_os_version]."
}

_auto_import_modules() {
  local script_lib_modules_dir=$(get_script_lib_modules_dir)
  _check_if_dir_exists "$script_lib_modules_dir"
  
  local os_id=$(_get_linux_os_id)
  local all_files_in_module=$(read_all_files_in_dir $script_lib_modules_dir)
  
  for filepath in $all_files_in_module; do
    local module_relative_path="${filepath/$script_lib_modules_dir}"
    if [[ $module_relative_path != *"/distro/"* || $module_relative_path == *"/distro/$os_id"* ]]; then
      source $filepath
    fi
  done
}

_setup_script_start_time() {
  BSL_SCRIPT_START_TIME=$(get_local_timestamp)
  BSL_SCRIPT_START_SECONDS=$(date +%s)
}

_do_init_script() {
  _auto_import_modules
  _setup_script_start_time
  _init_debug_status
  
  _check_if_bash_version_ok
  _check_if_os_version_ok
  _check_if_required_commands_valid
}
